<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Susai&#39;s blog</title>
  
  <subtitle>Bioinformatics, Programing and Life</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-21T07:31:08.108Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Susai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客在搭建中遇到的一些问题及解决方法</title>
    <link href="http://example.com/2022/07/21/Hexo%E5%8D%9A%E5%AE%A2%E5%9C%A8%E6%90%AD%E5%BB%BA%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/07/21/Hexo%E5%8D%9A%E5%AE%A2%E5%9C%A8%E6%90%AD%E5%BB%BA%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2022-07-21T06:25:22.000Z</published>
    <updated>2022-07-21T07:31:08.108Z</updated>
    
    <content type="html"><![CDATA[<p>在搭建博客的过程中出现了各种各样奇怪的问题，在这里记录解决问题的过程</p><ul><li><p>github上传文件后网页不更新</p></li><li><p>需要我每改完一次页面就 hexo generate 一次吗</p></li><li><p>出现 Please make sure you have the correct access rights and the repository exists 报错</p></li><li><p>出现 ssh: connect to host github.com port 22: Connection refused 报错</p></li><li><p>在文章中无法使用 markdown 格式插入图片</p></li></ul><span id="more"></span><hr><h4 id="github上传文件后网页不更新"><a href="#github上传文件后网页不更新" class="headerlink" title="github上传文件后网页不更新"></a>github上传文件后网页不更新</h4><p>目前我们最常用的平台就是github和gitee，但是二者有一个显著的差别</p><ul><li>gitee需要我们手动部署网站，上传一次就部署一次，但是可以通过添加插件或者使用其他自动化方法解决</li><li>github自动帮助我们部署，上传完毕即更新（有些情况下可能需要等待一些时间）<br>若依然没有更新，则可能是 <code>浏览器缓存</code>惹的祸。试着打开浏览器设置页面把所有缓存删干净，或者将浏览器关闭再打开，再次刷新页面是不是就可以看到更新后的结果啦？  </li></ul><hr><h4 id="需要我每改完一次页面就-hexo-generate-一次吗"><a href="#需要我每改完一次页面就-hexo-generate-一次吗" class="headerlink" title="需要我每改完一次页面就 hexo generate 一次吗"></a>需要我每改完一次页面就 hexo generate 一次吗</h4><p>抱歉完全不需要，先 <code>hexo serve</code> 构建本地服务器后，你每次修改文章或者调整设置并且保存过后，刷新网页就会自动更新<br>但是上传文件还是需要<code>hexo generate</code>重新构建一次<br>为方便上传博客，写了一个简单的shell脚本。运行时只需输入<code>sh deploy.sh</code>即可自动上传<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g --d</span><br></pre></td></tr></table></figure><br>在本地运行<code>hexo serve</code>时，也写了一个shell脚本进行本地构建。运行时输入<code>sh serve.sh</code>即可一键构建本地博客<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo serve</span><br></pre></td></tr></table></figure></p><hr><h4 id="出现-Please-make-sure-you-have-the-correct-access-rights-and-the-repository-exists-报错"><a href="#出现-Please-make-sure-you-have-the-correct-access-rights-and-the-repository-exists-报错" class="headerlink" title="出现 Please make sure you have the correct access rights and the repository exists 报错"></a>出现 Please make sure you have the correct access rights and the repository exists 报错</h4><p><strong>原因：</strong></p><ul><li>网络不好，建议换个网或者多<code>hexo deploy</code>几次，总有一次会成功  </li><li>或者是公钥出问题了,需要删除~/.ssh下文件,然后重设置用户名和邮箱再重新生成ssh公钥即可解决  </li></ul><p><strong>解决:</strong>  </p><ol><li>删除.ssh下所有所有文件</li><li>设置用户名和用户名邮箱</li><li>生成ssh公钥</li><li>去github上配置ssh公钥</li></ol><p>为方便起见，在 .ssh 文件夹下创建 shell 脚本一键构建 ssh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#x27;MsSusai&#x27;</span><br><span class="line">git config --global user.email &#x27;liuhaorantony@163.com&#x27;</span><br><span class="line">ssh-keygen -t rsa -C &quot;liuhaorantony@163.com&quot;</span><br></pre></td></tr></table></figure></p><hr><h4 id="出现-ssh-connect-to-host-github-com-port-22-Connection-refused-报错"><a href="#出现-ssh-connect-to-host-github-com-port-22-Connection-refused-报错" class="headerlink" title="出现 ssh: connect to host github.com port 22: Connection refused 报错"></a>出现 ssh: connect to host github.com port 22: Connection refused 报错</h4><p>其实关闭科学上网工具，多<code>git push</code>几次一般都可以解决问题  </p><p>本文以Windows系统为例进行说明，在个人电脑上使用Git命令来操作GitHub上的项目，本来都很正常，突然某一天开始，会提示如下错误<code>ssh: connect to host github.com port 22: Connection refused。</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">ssh: connect to host github.com port 22: Connection refused</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><br><strong>排查思路</strong><br><code>ssh: connect to host github.com port 22: Connection refused</code>这个错误提示的是连接<code>github.com</code>的22端口被拒绝了。</p><p>原本以为github.com挂了，但是浏览器访问github.com一切正常。</p><p>网上搜索这个报错，发现很多人遇到这个问题，大概有3个原因和对应解决方案：  </p><p><strong>1. 使用GitHub的443端口（有用）</strong>  </p><p>22端口可能被防火墙屏蔽了，可以尝试连接GitHub的443端口。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br><span class="line"></span><br><span class="line"># Add section below to it</span><br><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br><span class="line"></span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi xxxxx! You&#x27;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure><br>这个解决方案的思路是：给<code>~/.ssh/config</code>文件里添加如下内容，这样ssh连接GitHub的时候就会使用443端口。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><br>如果<code>~/.ssh</code>目录下没有<code>config</code>文件，新建一个即可。</p><p>修改完<code>~/.ssh/config</code>文件后，使用<code>ssh -T git@github.com</code>来测试和GitHub的网络通信是否正常，如果提示<code>Hi xxxxx! You&#39;ve successfully authenticated, but GitHub does notprovide shell access.</code> 就表示一切正常了。 </p><p><strong>这个方案有效的前提是：</strong> 执行命令<code>ssh -T -p 443 git@ssh.github.com</code>后不再提示<code>connection refused</code>，所以要尝试这个方案的小伙伴先执行这条命令测试下。  </p><p><strong>2. 使用https协议，不要使用ssh协议（没试过，不知道是否有效）</strong><br>在你的GitHub的本地repo目录，执行如下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --<span class="built_in">local</span> -e</span></span><br></pre></td></tr></table></figure><br>然后把里面的url配置项从git格式<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = git@github.com:username/repo.git</span><br></pre></td></tr></table></figure><br>修改为https格式<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = https://github.com/username/repo.git</span><br></pre></td></tr></table></figure><br>这个其实修改的是repo根目录下的<code>.git/config</code>文件。  </p><p><strong>3. 修改hosts文件（有用，但过一段时间hosts就会失效，需要重新设置hosts）</strong><br>既然和GitHub建立ssh连接的时候提示<code>connection refused</code>，那我们就详细看看建立ssh连接的过程中发生了什么，可以使用<code>ssh -v·</code>命令，<code>-v</code>表示verbose，会打出详细日志。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -vT git@github.com</span><br><span class="line">OpenSSH_9.0p1, OpenSSL 1.1.1o  3 May 2022</span><br><span class="line">debug1: Reading configuration data /etc/ssh/ssh_config</span><br><span class="line">debug1: Connecting to github.com [::1] port 22.</span><br><span class="line">debug1: connect to address ::1 port 22: Connection refused</span><br><span class="line">debug1: Connecting to github.com [127.0.0.1] port 22.</span><br><span class="line">debug1: connect to address 127.0.0.1 port 22: Connection refused</span><br><span class="line">ssh: connect to host github.com port 22: Connection refused</span><br></pre></td></tr></table></figure><br>从上面的信息马上就发现了诡异的地方，连接github.com的地址居然是<code>::1</code>和<code>127.0.0.1</code>。前者是IPV6的localhost地址，后者是IPV4的localhost地址。</p><p>到这里问题就很明确了，是DNS解析出问题了，导致github.com域名被解析成了localhost的ip地址，就自然连不上GitHub了。</p><p>Windows下执行<code>ipconfig /flushdns</code> 清楚DNS缓存后也没用，最后修改hosts文件，增加一条github.com的域名映射搞定。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">140.82.113.4 github.com</span><br></pre></td></tr></table></figure><br>查找github.com的ip地址可以使用 <a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a> 来查询  </p><p>hosts文件位于<code>C:\Windows\System32\drivers\etc</code></p><p>这个问题其实就是DNS解析被污染了，有2种可能：</p><ul><li>DNS解析被运营商劫持了</li><li>使用了科学上网工具</li></ul><hr><h4 id="在文章中无法使用-markdown-格式插入图片"><a href="#在文章中无法使用-markdown-格式插入图片" class="headerlink" title="在文章中无法使用 markdown 格式插入图片"></a>在文章中无法使用 markdown 格式插入图片</h4><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。<br>例如你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于<code>![](/images/image.jpg)</code>的方法访问它们。<br>Hexo也提供了更组织化的方式来管理资源。管理资源功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><br>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个和文章文件同名的资源文件夹，里面放入所有和文章有关的资源，然后通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。  </p><p>在Hexo 3 中，许多新的标签插件被加入到了核心代码中<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><br>比如说：当你打开<code>文章资源文件夹功能</code>后，你把一个 <code>1.jpg</code> 图片放在了你的<code>资源文件夹</code>中，如果通过使用相对路径的常规 markdown 语法 <code>![](1.jpg)</code> ，它将 <strong>不会</strong> 出现在首页上。正确的引用图片方式是使用下列的标签插件而不是 markdown ：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img 1.jpg img1 %&#125;</span><br></pre></td></tr></table></figure><br>通过这种方式，图片将会同时出现在文章和主页以及归档页中<br>但是这样的不好之处在于无法在markdown中预览图片  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在搭建博客的过程中出现了各种各样奇怪的问题，在这里记录解决问题的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;github上传文件后网页不更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要我每改完一次页面就 hexo generate 一次吗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出现 Please make sure you have the correct access rights and the repository exists 报错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出现 ssh: connect to host github.com port 22: Connection refused 报错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在文章中无法使用 markdown 格式插入图片&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>NexT主题自定义侧边栏图标</title>
    <link href="http://example.com/2022/07/21/NexT%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%9B%BE%E6%A0%87/"/>
    <id>http://example.com/2022/07/21/NexT%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%9B%BE%E6%A0%87/</id>
    <published>2022-07-20T16:22:56.000Z</published>
    <updated>2022-07-21T07:27:35.356Z</updated>
    
    <content type="html"><![CDATA[<p>NexT 主题的图标基本上都是由 Font Awesome 提供，但是知乎、CSDN、bilibili等大多数国内应用软件的图标在 5.1 版本的 Font Awesome 都不支持。为了支持侧边栏各种应用小图标的显示，可以利用嵌入svg格式的图标进行实现。  </p><span id="more"></span><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p><strong>1. 通过Font Awesome 搜索图标，比如bilibili</strong><br>选择 svg 格式下载，并将图片保存在 Hexo 文件下的 source\images 路径下，如果没有 images 文件夹，则新建 images 文件夹。（注意：这里是 Hexo下的文件夹下，不是主题文件 NexT 的路径下） </p><img src="/2022/07/21/NexT%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%9B%BE%E6%A0%87/1.png" class="" title="img1"><p><strong>2. 设置图标格式</strong><br>在 Hexo 的 source_data 路径下，新建 styles.styl 文件， 如果没有 _data 文件夹，则新建文件夹。在 style.styl 文件中设置图标样式如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* 侧边栏图标格式设置 */</span><br><span class="line">.fa-bilibili &#123;</span><br><span class="line">  background: url(/images/bilibili.svg);</span><br><span class="line">  background-size: 1em 1em;</span><br><span class="line">  opacity: 0.55;</span><br><span class="line">  background-position: 0.05rem 0.28rem;</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  height: 1rem;</span><br><span class="line">  width: 1rem; </span><br><span class="line">  border-radius: 0rem;</span><br><span class="line">  /*鼠标停留在图标上时，图标呈现发光效果*/</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">      opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 设置主题配置文件 _config 参数</strong><br>在 NexT 文件夹下的 _config.yml 设置自定义文件夹路径，找到 custom_file_path 下，取消对 style 路径的注释  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.njk</span><br><span class="line">  #header: source/_data/header.njk</span><br><span class="line">  #sidebar: source/_data/sidebar.njk</span><br><span class="line">  #postMeta: source/_data/post-meta.njk</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.njk</span><br><span class="line">  #footer: source/_data/footer.njk</span><br><span class="line">  #bodyEnd: source/_data/body-end.njk</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  style: source/_data/styles.styl</span><br></pre></td></tr></table></figure><p><strong>4. 对 social 的图标进行设置如下</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  bilibili: https://space.bilibili.com/13356120 || fab fa-bilibili</span><br></pre></td></tr></table></figure><h4 id="最终结果："><a href="#最终结果：" class="headerlink" title="最终结果："></a>最终结果：</h4><img src="/2022/07/21/NexT%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%9B%BE%E6%A0%87/2.png" class="" title="img2">]]></content>
    
    
    <summary type="html">&lt;p&gt;NexT 主题的图标基本上都是由 Font Awesome 提供，但是知乎、CSDN、bilibili等大多数国内应用软件的图标在 5.1 版本的 Font Awesome 都不支持。为了支持侧边栏各种应用小图标的显示，可以利用嵌入svg格式的图标进行实现。  &lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
</feed>
